{
	"info": {
		"_postman_id": "2b9ec8a1-8b41-4389-9d8a-959c362fa8f0",
		"name": "group_29",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18850221"
	},
	"item": [
		{
			"name": "add_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const person_data = pm.response.json()\r",
							"let person = {\r",
							"    \"age\": \"25\",\r",
							"    \"family\": {\r",
							"        \"children\": [\r",
							"            [\r",
							"                \"Alex\",\r",
							"                24\r",
							"            ],\r",
							"            [\r",
							"                \"Kate\",\r",
							"                12\r",
							"            ]\r",
							"        ],\r",
							"        \"u_salary_1_5_year\": 8000\r",
							"    },\r",
							"    \"name\": \"Arthur\",\r",
							"    \"salary\": 2000\r",
							"}\r",
							"\r",
							"let item_1 = \"Arthur\"\r",
							"pm.test(\"item_1 test\", function() {\r",
							"    pm.expect(item_1).to.equal(\"Arthur\")\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"item_2 person\", function() {\r",
							"    pm.expect(person.age).to.equal(\"25\")\r",
							"})\r",
							"\r",
							"pm.test(\"item_3 person_data\", function() {\r",
							"    pm.expect(person_data.age).to.equal(\"25\")\r",
							"})\r",
							"\r",
							"pm.test(\"item_4 person_data\", function() {\r",
							"    pm.expect(person_data.family.children[1][0]).to.equal(\"Kate\")\r",
							"})\r",
							"\r",
							"pm.test(\"item_5 person_data\", function() {\r",
							"    pm.expect(person_data).to.have.property(\"name\")\r",
							"})\r",
							"pm.test(\"item_6 person_data\", function() {\r",
							"    pm.expect(person_data).to.include.keys(\"age\")\r",
							"})\r",
							"\r",
							"pm.test(\"item_7 person_data\", function() {\r",
							"    pm.expect(person_data.family.children[1]).to.deep.include(12)\r",
							"})\r",
							"\r",
							"pm.test(\"item_8 person_data\", function() {\r",
							"    pm.expect(person_data.family.children[1]).to.be.a(\"Array\")\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "25",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Arthur",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "/s34lfgbj/Vadim/jjd909/12242kjkWpqc322823r23r3r457271evny",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{basic_url}}/get_test_user",
					"host": [
						"{{basic_url}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"let req = pm.request.body.formdata;\r",
							"\r",
							"//console.log(jsonData);\r",
							"//console.log(req);\r",
							"\r",
							"//Проверить, что name в ответе равно name в request (name вбить руками.)\r",
							"pm.test(\"параметр name в ответе равно name в request\", function () {    \r",
							"   pm.expect(jsonData.name).to.eql(req.get('name'));\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age в request (age вбить руками.)\r",
							"pm.test(\"параметр age в ответе равно age в request\", function () {    \r",
							"   pm.expect(jsonData.age).to.eql(req.get('age'));\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary в request (salary вбить руками.)\r",
							"pm.test(\"параметр salary в ответе равно salary в request\", function () {    \r",
							"   pm.expect(jsonData.salary).to.eql(+req.get('salary'));\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр family из response\r",
							"console.log(jsonData.family);\r",
							"\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"u_salary_1_5_year в ответе равно salary*4\", function () {    \r",
							"   pm.expect(jsonData.family.u_salary_1_5_year).to.eql(+req.get('salary')*4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "tim",
							"type": "text"
						},
						{
							"key": "age",
							"value": "23",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{basic_url}}/user_info_3",
					"host": [
						"{{basic_url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_method",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{basic_url}}/get_method?name=tim&age=23",
					"host": [
						"{{basic_url}}"
					],
					"path": [
						"get_method"
					],
					"query": [
						{
							"key": "name",
							"value": "tim"
						},
						{
							"key": "age",
							"value": "23"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_1",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{basic_url}}/object_info_1?name=tim&age=23&weight=100",
					"host": [
						"{{basic_url}}"
					],
					"path": [
						"object_info_1"
					],
					"query": [
						{
							"key": "name",
							"value": "tim"
						},
						{
							"key": "age",
							"value": "23"
						},
						{
							"key": "weight",
							"value": "100"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"let req = pm.request.url.query;\r",
							"\r",
							"\r",
							"\r",
							"//Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"response have start_qa_salary parameter\", function () {\r",
							"    pm.expect(jsonData).to.have.property('start_qa_salary');\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"response have qa_salary_after_6_months parameter\", function () {\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_6_months');\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"response have qa_salary_after_12_months parameter\", function () {\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_12_months');\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"response have qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_1.5_year');\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"response have qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_3.5_years');\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр person\r",
							"pm.test(\"response have person parameter\", function () {\r",
							"    pm.expect(jsonData).to.have.property('person');\r",
							"});\r",
							"\r",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"parameter from response start_qa_salary = parameter from request salary\", function () {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(+req.get('salary'));\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"parameter from response qa_salary_after_6_months = parameter from request salary*2\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(+req.get('salary')*2);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request)\r",
							"pm.test(\"parameter from response qa_salary_after_12_months = parameter from request salary*2.7\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(+req.get('salary')*2.7);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"parameter from response qa_salary_after_1.5_year = parameter from request salary*3.3\", function () {\r",
							"    pm.expect(jsonData['qa_salary_after_1.5_year']).to.eql(+req.get('salary')*3.3);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request)\r",
							"pm.test(\"parameter from response qa_salary_after_3.5_years = parameter from request salary*3.8\", function () {\r",
							"    pm.expect(jsonData['qa_salary_after_3.5_years']).to.eql(+req.get('salary')*3.8);\r",
							"});\r",
							"\r",
							"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"first element from person.u_name = parameter from request salary\", function () {\r",
							"    pm.expect(jsonData.person.u_name[0]).to.eql(+req.get('person.u_salary_5_years'));\r",
							"});\r",
							"\r",
							"//Проверить, что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"parameter person.u_age = parameter from request age\", function () {\r",
							"    pm.expect(jsonData.person.u_age).to.eql(+req.get('age'));\r",
							"});\r",
							"\r",
							"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"parameter person.u_salary_5_years = parameter from request person.u_salary_5_years*4.2\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(+req.get('salary')*4.2);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{basic_url}}/object_info_2?salary=1800&age=23&name=tim",
					"host": [
						"{{basic_url}}"
					],
					"path": [
						"object_info_2"
					],
					"query": [
						{
							"key": "salary",
							"value": "1800"
						},
						{
							"key": "age",
							"value": "23"
						},
						{
							"key": "name",
							"value": "tim"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"let req = pm.request.url.query;\r",
							"\r",
							"\r",
							"//Проверить, что name в ответе равно name в request (name забрать из request.)\r",
							"pm.test(\"name в ответе равно name в request\", function () {    \r",
							"    pm.expect(jsonData.name).to.eql(req.get('name'));\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age в request (age забрать из request.)\r",
							"pm.test(\"age в ответе равно age в request\", function () {    \r",
							"    pm.expect(jsonData.age).to.eql(req.get('age'));\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary в request (salary забрать из request.)\r",
							"pm.test(\"salary в ответе равно salary в request\", function () {    \r",
							"    pm.expect(jsonData.salary).to.eql(+req.get('salary'));\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр family из response.\r",
							"let keys = Object.keys(jsonData.family);\r",
							"for (key in keys){\r",
							"    console.log(keys[key]);\r",
							"}\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"у параметра dog есть параметры name\", function () {    \r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property('name');\r",
							"});\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"у параметра dog есть параметры age\", function () {    \r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property('age');\r",
							"});\r",
							"\r",
							"//Проверить, что параметр name имеет значение Luky\r",
							"pm.test(\"параметр name имеет значение Luky\", function () {    \r",
							"    pm.expect(jsonData.family.pets.dog.name).to.include('Luky');\r",
							"});\r",
							"\r",
							"//Проверить, что параметр age имеет значение 4\r",
							"pm.test(\"параметр age имеет значение 4\", function () {    \r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{basic_url}}/object_info_3?name=tim&age=23&salary=2000",
					"host": [
						"{{basic_url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "tim"
						},
						{
							"key": "age",
							"value": "23"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"let req = pm.request.url.query;\r",
							"\r",
							"\r",
							"//Проверить, что name в ответе равно name в request (name забрать из request.)\r",
							"pm.test(\"name в ответе равно name в request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req.get('name'));\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"age в ответе равно age из request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(+req.get('age'));\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр salary из request\r",
							"console.log(req.get('salary'))\r",
							"\r",
							"//Вывести в консоль параметр salary из response\r",
							"let salary = jsonData.salary;\r",
							"for (key in salary){\r",
							"    console.log(salary[key])\r",
							"}\r",
							"\r",
							"//Вывести в консоль 0-й элемент параметра salary из response\r",
							"console.log(jsonData.salary[0]);\r",
							"\r",
							"//Вывести в консоль 1-й элемент параметра salary параметр salary из response\r",
							"console.log(jsonData.salary[1]);\r",
							"\r",
							"//Вывести в консоль 2-й элемент параметра salary параметр salary из response\r",
							"console.log(jsonData.salary[2]);\r",
							"\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"0-й элемент параметра salary равен salary из request\", function () {\r",
							"    pm.expect(jsonData.salary[0]).to.eql(+req.get('salary'));\r",
							"});\r",
							"\r",
							"//Проверить, что 1-й элемент параметра salary равен salary*2\r",
							"pm.test(\"1-й элемент параметра salary равен salary*2 \", function () {\r",
							"    pm.expect(+jsonData.salary[1]).to.eql(jsonData.salary[0]*2);\r",
							"});\r",
							"\r",
							"//Проверить, что 2-й элемент параметра salary равен salary*3\r",
							"pm.test(\"2-й элемент параметра salary равен salary*3\", function () {\r",
							"    pm.expect(+jsonData.salary[2]).to.eql(jsonData.salary[0]*3);\r",
							"});\r",
							"\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary\r",
							"let salaryList = jsonData.salary\r",
							"for (key in salaryList){\r",
							"    console.log(key+'-й элемент = '+salaryList[key])\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{basic_url}}/object_info_4?name=tim&age=23&salary=2500",
					"host": [
						"{{basic_url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "tim"
						},
						{
							"key": "age",
							"value": "23"
						},
						{
							"key": "salary",
							"value": "2500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"let req = pm.request.body.formdata;\r",
							"\r",
							"\r",
							"\r",
							"//Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"response имеет параметр start_qa_salary\", function () {\r",
							"    pm.expect(jsonData).to.have.property('start_qa_salary');\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"response имеет параметр qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_6_months');\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"response имеет параметр qa_salary_after_12_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_12_months');\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"response имеет параметр qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_1.5_year');\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"response имеет параметр qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(jsonData).to.have.property('qa_salary_after_3.5_years');\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр person\r",
							"pm.test(\"response имеет параметр person\", function () {\r",
							"    pm.expect(jsonData).to.have.property('person');\r",
							"});\r",
							"\r",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"параметр start_qa_salary равен salary\", function () {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(+req.get('salary'));\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"параметр qa_salary_after_6_months равен salary*2\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(+req.get('salary')*2);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request)\r",
							"pm.test(\"параметр qa_salary_after_12_months равен salary*2.7\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(+req.get('salary')*2.7);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"параметр qa_salary_after_1.5_year равен salary*3.3\", function () {\r",
							"    pm.expect(jsonData['qa_salary_after_1.5_year']).to.eql(+req.get('salary')*3.3);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request)\r",
							"pm.test(\"параметр qa_salary_after_3.5_years равен salary*3.8\", function () {\r",
							"    pm.expect(jsonData['qa_salary_after_3.5_years']).to.eql(+req.get('salary')*3.8);\r",
							"});\r",
							"\r",
							"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"в параметре person, 1-й элемент из u_name равен salary\", function () {\r",
							"    pm.expect(jsonData.person.u_name[0]).to.eql(+req.get('person.u_salary_5_years'), 'Неверно');\r",
							"});\r",
							"\r",
							"//Проверить, что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"параметр u_age равен age\", function () {\r",
							"    pm.expect(jsonData.person.u_age).to.eql(+req.get('age'));\r",
							"});\r",
							"\r",
							"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"параметр u_salary_5_years равен salary*4.2 из request\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(+req.get('salary')*4.2);\r",
							"});\r",
							"\r",
							"//Написать цикл, который выведет в консоль по порядку элементы списка из параметра person\r",
							"let uName = jsonData.person.u_name;\r",
							"for (key in uName){\r",
							"    console.log(uName[key]);\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "tim",
							"type": "text"
						},
						{
							"key": "age",
							"value": "23",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{basic_url}}/user_info_2",
					"host": [
						"{{basic_url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.text();\r",
							"\r",
							"pm.test(\"в body приходит правильный string\", function () {    \r",
							"    pm.expect(jsonData).to.have.string('This is the first responce from server!');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{basic_url}}/first",
					"host": [
						"{{basic_url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		}
	]
}